REFERENCES:
    GENERAL-1:
      TABLES:
        The Molar Heat Capacities of Gases in the Ideal Gas (Zero-Pressure) State:
          TABLE-ID: 1
          DESCRIPTION:
            This table provides the heat capacity at constant pressure of ideal gas (Cp_IG) in J/mol.K as a function of temperature (T) in K.
          EQUATIONS:
            EQ-1:
              BODY:
                - res = (parms['a0'] + parms['a1']*args['T'] + parms['a2']*(args['T']**2) + parms['a3']*(args['T']**3) + parms['a4']*(args['T']**4))*parms['R']
              ARGS:
                temperature:
                  name: temperature
                  symbol: T
                  unit: K
              PARMS:
                a0:
                  name: a0
                  symbol: a0
                  unit: 1
                  conversion: 1
                a1:
                  name: a1
                  symbol: a1
                  unit: 1E3
                  conversion: 1E3
                a2:
                  name: a2
                  symbol: a2
                  unit: 1E5
                  conversion: 1E5
                a3:
                  name: a3
                  symbol: a3
                  unit: 1E8
                  conversion: 1E8
                a4:
                  name: a4
                  symbol: a4
                  unit: 1E11
                  conversion: 1E11
                R:
                  name: R
                  symbol: R
                  unit: J/mol.K
                  conversion: 1
              RETURNS:
                heat_capacity_ideal_gas:
                  name: heat capacity of ideal gas
                  symbol: Cp_IG
                  unit: J/mol.K
              BODY-INTEGRAL:
                  - A1 = parms['a0']*args['T1']
                  - B1 = (parms['a1']/2)*(args['T1']**2)
                  - C1 = (parms['a2']/3)*(args['T1']**3)
                  - D1 = (parms['a3']/4)*(args['T1']**4)
                  - E1 = (parms['a4']/5)*(args['T1']**5)
                  - res1 =  A1 + B1 + C1 + D1 + E1
                  - A2 = parms['a0']*args['T2']
                  - B2 = (parms['a1']/2)*(args['T2']**2)
                  - C2 = (parms['a2']/3)*(args['T2']**3)
                  - D2 = (parms['a3']/4)*(args['T2']**4)
                  - E2 = (parms['a4']/5)*(args['T2']**5)
                  - res2 =  A2 + B2 + C2 + D2 + E2
                  - res = parms['R']*(res2 - res1)
              BODY-FIRST-DERIVATIVE:
                  - res = parms['R']*(parms['a1'] + 2*parms['a2']*args['T'] + 3*parms['a3']*(args['T']**2) + 4*parms['a4']*(args['T']**3))
              BODY-SECOND-DERIVATIVE:
                  - res = parms['R']*(2*parms['a2'] + 6*parms['a3']*args['T'] + 12*parms['a4']*(args['T']**2))
              CUSTOM-INTEGRAL:
                Cp/R:
                  - A1 = parms['a0']*args['T1']
                  - B1 = (parms['a1']/2)*(args['T1']**2)
                  - C1 = (parms['a2']/3)*(args['T1']**3)
                  - D1 = (parms['a3']/4)*(args['T1']**4)
                  - E1 = (parms['a4']/5)*(args['T1']**5)
                  - res1 =  A1 + B1 + C1 + D1 + E1
                  - A2 = parms['a0']*args['T2']
                  - B2 = (parms['a1']/2)*(args['T2']**2)
                  - C2 = (parms['a2']/3)*(args['T2']**3)
                  - D2 = (parms['a3']/4)*(args['T2']**4)
                  - E2 = (parms['a4']/5)*(args['T2']**5)
                  - res2 =  A2 + B2 + C2 + D2 + E2
                  - res = res2 - res1
                Cp/RT:
                  - A1 = parms['a0']*math.log(abs(args['T1']))
                  - B1 = parms['a1']*args['T1']
                  - C1 = (parms['a2']/2)*(args['T1']**2)
                  - D1 = (parms['a3']/3)*(args['T1']**3)
                  - E1 = (parms['a4']/4)*(args['T1']**4)
                  - res1 =  A1 + B1 + C1 + D1 + E1
                  - A2 = parms['a0']*math.log(abs(args['T2']))
                  - B2 = parms['a1']*args['T2']
                  - C2 = (parms['a2']/2)*(args['T2']**2)
                  - D2 = (parms['a3']/3)*(args['T2']**3)
                  - E2 = (parms['a4']/4)*(args['T2']**4)
                  - res2 =  A2 + B2 + C2 + D2 + E2
                  - res = res2 - res1
        General Data:
          TABLE-ID: 2
          DESCRIPTION:
            This table provides the general data of the compound including molecular weight (MW), critical temperature (Tc), critical pressure (Pc), critical molar volume (Vc), critical compressibility factor (Zc), acentric factor (AcFa), enthalpy of formation in the ideal gas state (dHf_IG), and Gibbs energy of formation in the ideal gas state (dGf_IG).
          DATA:
            COLUMNS:
              - No.
              - Name
              - Formula
              - State
              - MW
              - Tc
              - Pc
              - Vc
              - Zc
              - AcFa
              - dHf_IG
              - dGf_IG
            SYMBOL:
              - None
              - None
              - None
              - None
              - MW
              - Tc
              - Pc
              - Vc
              - Zc
              - AcFa
              - dHf_IG
              - dGf_IG
            UNIT:
              - None
              - None
              - None
              - None
              - g/mol
              - K
              - MPa
              - m3/kmol
              - None
              - None
              - kJ/mol
              - kJ/mol
            CONVERSION:
              - None
              - None
              - None
              - None
              - 1
              - 1
              - 1
              - 1
              - 1
              - 1
              - 1
              - 1
        Vapor Pressure:
          TABLE-ID: 3
          DESCRIPTION:
            This table provides the vapor pressure (VaPr) in Pa as a function of temperature (T) in K.
          EQUATIONS:
            EQ-1:
              BODY:
                - parms['C1'] = parms['C1']/1
                - parms['C2'] = parms['C2']/1
                - parms['C3'] = parms['C3']/1
                - parms['C4'] = parms['C4']/1
                - parms['C5'] = parms['C5']/1
                - res = math.exp(parms['C1'] + parms['C2']/args['T'] + parms['C3']*math.log(args['T']) + parms['C4']*(args['T']**parms['C5']))
              ARGS:
                temperature:
                  name: temperature
                  symbol: T
                  unit: K
              PARMS:
                C1:
                  name: C1
                  symbol: C1
                  unit: 1
                  conversion: 1
                C2:
                  name: C2
                  symbol: C2
                  unit: 1
                  conversion: 1
                C3:
                  name: C3
                  symbol: C3
                  unit: 1
                  conversion: 1
                C4:
                  name: C4
                  symbol: C4
                  unit: 1
                  conversion: 1
                C5:
                  name: C5
                  symbol: C5
                  unit: 1
                  conversion: 1
              RETURNS:
                vapor_pressure:
                  name: vapor pressure
                  symbol: VaPr
                  unit: Pa
              BODY-INTEGRAL:
                None
              BODY-FIRST-DERIVATIVE:
                None
              BODY-SECOND-DERIVATIVE:
                None